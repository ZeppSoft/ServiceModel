using Grpc.Core;
using Newtonsoft.Json;
using ServiceModel.Grpc.Client;
using Shared;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Remoting.Channels;
using System.Text;
using System.Threading.Tasks;

namespace Client
{
    public class ServiceWrapper : ICustomWareNET
    {
        private static readonly IClientFactory DefaultClientFactory = new ClientFactory(new ServiceModelGrpcClientOptions
        {
            // set ProtobufMarshaller as default Marshaller
            MarshallerFactory = MessagePackMarshallerFactory.Default //JsonMarshallerFactory.Default//ProtobufMarshallerFactory.Default
        });
        ICustomWareNET _service;
        public ServiceWrapper()
        {
            int SelfHostPort = 7000;
            // register IPersonService proxy generated by ServiceModel.Grpc.DesignTime
            DefaultClientFactory.AddClient<ILoanService>(options =>
            {
                // setup ServiceModelGrpcClientOptions for this client
                // by default options contain values from default factory configuration
            });


            DefaultClientFactory.AddClient<ISimple>(options =>
            {
                // setup ServiceModelGrpcClientOptions for this client
                // by default options contain values from default factory configuration
                options.MarshallerFactory = MessagePackMarshallerFactory.Default;
            });

            DefaultClientFactory.AddClient<ICustomWareNET>(options =>
            {
                // setup ServiceModelGrpcClientOptions for this client
                // by default options contain values from default factory configuration
                options.MarshallerFactory = MessagePackMarshallerFactory.Default;
            });

            Console.WriteLine("Call ServerSelfHost");
            var channel = new Channel("localhost", SelfHostPort, ChannelCredentials.Insecure);


            var loanManager = DefaultClientFactory.CreateClient<ILoanService>(channel);
            var simpleService = DefaultClientFactory.CreateClient<ISimple>(channel);
            _service = DefaultClientFactory.CreateClient<ICustomWareNET>(channel);

           // Run(new Channel("localhost", SelfHostPort, ChannelCredentials.Insecure));
        }

       
        public bool IsStarted => throw new NotImplementedException();
        public IList GetLoanOneByOnePaymentSplit(string contractNumber, ref decimal repaymentAmount, decimal penaltyAmount, string paymentCurrency, DateTime? date)
        {
            throw new NotImplementedException();
        }
        public (IList list, decimal repaymentAmount) GetLoanOneByOnePaymentSplitTest(string contractNumber,  decimal repaymentAmount, decimal penaltyAmount, string paymentCurrency, DateTime? date)
        {
           return _service.GetLoanOneByOnePaymentSplitTest(contractNumber,  repaymentAmount, penaltyAmount, paymentCurrency, date);
        }
        public IList GetParams(IList<IListParams> pars, IListParams par)
        {
            return _service.GetParams(pars, par);
        }
        public decimal CalculateInterestAmount(ICWObject value)
        {
            //Type t = value.GetType();
            //var instance = Activator.CreateInstance(t);

            //var s = (instance)value ;
            //value as typeof(t);

            // var val =  JsonConvert.DeserializeObject<ICWObject>(JsonConvert.SerializeObject(value));

            //var ser = JsonConvert.SerializeObject(value);

            //instance = JsonConvert.DeserializeObject(ser, t);

            var res = _service.CalculateInterestAmount(value);
            return res;
        }

        public decimal CalculateInterestAmounts(ICWObject value, decimal mainRateValue)
        {
            throw new NotImplementedException();
        }

        public void CheckVersion(Version client, TimeZone tz)
        {
            throw new NotImplementedException();
        }

        public T Clone<T>(T source) where T : ICWObject
        {
            throw new NotImplementedException();
        }

        public void Delete(IList value)
        {
            throw new NotImplementedException();
        }

        public void Delete(ICWObject value)
        {
            throw new NotImplementedException();
        }

        public void Delete(Type type, object id)
        {
            throw new NotImplementedException();
        }

        public void Export(ICWObject value)
        {
            throw new NotImplementedException();
        }

        public void Export(ICWObject value, params object[] parameters)
        {
            throw new NotImplementedException();
        }

        public ICWObject Find(object id, Type type)
        {
            throw new NotImplementedException();
        }

        public DateTime GetActualDate()
        {
            throw new NotImplementedException();
        }

        public int GetApplicationServerID()
        {
            throw new NotImplementedException();
        }

        public DateTime GetCurrentDate()
        {
            throw new NotImplementedException();
        }

        public TimeSpan GetCurrentTime()
        {
            throw new NotImplementedException();
        }

        public string[] GetLoggedInUsers()
        {
            throw new NotImplementedException();
        }

       

        public byte[] GetPublicKey()
        {
            throw new NotImplementedException();
        }

        public bool IsSessionLocalLang()
        {
            throw new NotImplementedException();
        }

        public IList Load(Type type)
        {
            throw new NotImplementedException();
        }

        public object LoadObject(Type type, object id)
        {
           return _service.LoadObject(type, id);
        }

        public void LogMessage(byte typeID, int threadID, string message, Exception ex)
        {
            throw new NotImplementedException();
        }

        public void Logout()
        {
            throw new NotImplementedException();
        }

        public decimal MainRateValue(ICWObject value)
        {
            throw new NotImplementedException();
        }

        public ICWObject New(Type type)
        {
            throw new NotImplementedException();
        }

        public T New<T>(bool clearFields = true)
        {
            throw new NotImplementedException();
        }

        public IList New(Type type, int count)
        {
            throw new NotImplementedException();
        }

        public ICWObject New(Type type, bool clearFields)
        {
            throw new NotImplementedException();
        }

        public void ResetServiceCache()
        {
            throw new NotImplementedException();
        }

        public ICWObject Save(ICWObject value)
        {
            throw new NotImplementedException();
        }

        public IList Save(IList value)
        {
            throw new NotImplementedException();
        }

        public IList Search(ICWObject sample)
        {
            throw new NotImplementedException();
        }

        public List<OT> SearchGeneric<OT>(OT sample) where OT : ICWObject
        {
            throw new NotImplementedException();
        }

        public T SearchOne<T>(T sample, bool retSample = false) where T : ICWObject
        {
            throw new NotImplementedException();
        }

        public T SearchOneByCode<T>(string code) where T : ICWObject
        {
            throw new NotImplementedException();
        }

        public void SetClientData(string languageID, int terminalID, string machineName)
        {
            throw new NotImplementedException();
        }

        public void SetServerData(string languageID, int terminalID, string machineName, bool updateLoginDate)
        {
            throw new NotImplementedException();
        }

        public void Stop()
        {
            throw new NotImplementedException();
        }

        List<T> ICustomWareNET.Load<T>()
        {
            throw new NotImplementedException();
        }

        T ICustomWareNET.LoadObject<T>(object id)
        {
            return LoadObject(typeof(T), id) as T;
        }

        T ICustomWareNET.LoadObject<T>(object id, bool fromDatabase)
        {
            throw new NotImplementedException();
        }

        T ICustomWareNET.LoadOrCreate<T>(object id)
        {
            throw new NotImplementedException();
        }

        T ICustomWareNET.SaveG<T>(T value)
        {
            throw new NotImplementedException();
        }

       
    }
}
